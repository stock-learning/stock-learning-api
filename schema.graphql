scalar DateTime

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query {
    testeQuery: String
    login(username: String!, password: String!): LoginOutput!
    flutterTeste(name: String): FlutterTesteOutput
    companyDataByInitials(initials: String): CompanyData
    userFollowCompany(initials: String): Boolean
    companyStockCurrentValue(initials: String): Float
    tweets(initials: String): [Tweet]
    currentUserNotification: [CurrentUserNotificationOutput]
    currentUserQuery: UserOutput!
}

type Mutation {
    currentUserMutation(user: UserInput): UserOutput
}

type Subscription {
    newLiveUpdate: NewLiveUpdateOutput
}

# Inputs

input UserInput {
    name: String
    email: String!
    password: String!
}

# Outputs

type CurrentUserNotificationOutput {
    text: String!
    dateTime: DateTime!
}

type LoginOutput {
    success: Boolean!
    token: String
}

type FlutterTesteOutput {
    message: String
}

type NewLiveUpdateOutput {
    message: String
}

type UserOutput {
    name: String
    email: String
}

# Documents
type CompanyData {
    id: String!
    initials: String!
    name: String
    logoUrl: String
    type: String
    sector: String
    description: String
}

type Tweet {
    account: String
    tweet: String
    cleanText: String
    createdAt: DateTime
    statusId: String
    sentiment: String
    relatedInitials: [String]
}

